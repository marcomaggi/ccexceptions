\input texinfo.tex
@c %**start of header
@setfilename ccexceptions.info
@settitle CCExceptions
@c %**end of header

@include version.texi
@include macros.texi
@include ccexceptions-macros.texi

@c page
@c ------------------------------------------------------------
@c Document specific macros.
@c ------------------------------------------------------------

@macro ConditionSubtypingExample{FILESTEM, TYPESTEM}
@subsubheading Subtyping example

To define a subtype of @objtype{cce_condition_\TYPESTEM\_t} we can copy the code in the files:

@example
condition-subtyping-\FILESTEM\.c
condition-subtyping-\FILESTEM\-header.h
condition-subtyping-\FILESTEM\-body.c
@end example

@noindent
under the @file{tests} directory of the source distribution; the code defines a new
exceptional--condition object--type @objtype{my_condition_\TYPESTEM\_subtype_t}.
@end macro

@macro ExceptionalConditionIndexEntries{DESCRIPTION}
@cindex \DESCRIPTION\, exceptional condition
@cindex Exceptional conditions, \DESCRIPTION\
@end macro

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      CCExceptions

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    CCExceptions

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           ccexceptions

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marco.maggi-ipsu@@poste.it}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2016-2019

@c ------------------------------------------------------------

@set PackageAutoconfPrefix              CCEXCEPTIONS
@set PackagePkgconfigModule             ccexceptions
@set PackageLibsVar                     @env{CCEXCEPTIONS_LIBS}
@set PackageCflagsVar                   @env{CCEXCEPTIONS_CFLAGS}
@c This is the stem of the library in "libccexceptions.so".
@set PackageLibstem                     ccexceptions
@set PackageApiPrefixLower              cce_
@set PackageApiPrefixUpper              CCE_

@set PackageHeader                      ccexceptions.h
@set PackageHeaderFile                  @file{@value{PackageHeader}}

@set GithubUrl                 @url{http://github.com/marcomaggi/@value{PACKAGE_NICKNAME}}
@set BitbucketUrl              @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}}
@set DownloadUrl               @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}/downloads}
@set DocumentationUrl          @url{http://marcomaggi.github.io/docs/@value{PACKAGE_NICKNAME}.html}

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @value{VERSION} of @value{PACKAGE}, a C11 Standard language library;
it implements an interface to non--local exits, which is somewhat similar to exceptions handling.
The library targets @posix{} systems.

The package is distributed under the terms of the @gnu{} Lesser General Public License (@lgpl{}).

The latest release can be downloaded from:

@center @value{DownloadUrl}

@noindent
development takes place at:

@center @value{GithubUrl}

@noindent
and as backup at:

@center @value{BitbucketUrl}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of the @gnu{}
Free Documentation License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being ``@gnu{} Free Documentation License'' and ``@gnu{} Lesser
General Public License'', no Front--Cover Texts, and no Back--Cover Texts.  A copy of the license is
included in the section entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @value{VERSION}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* ccexceptions: (ccexceptions).       CCExceptions a C language library
                                      implementing exceptions handling.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* version::                     Version functions.
* setjmp::                      Brief introduction to non-local exits.
* locations::                   The locations @api{}.
* handlers::                    The location handlers @api{}.
* conditions::                  Exceptional condition descriptors.
* system::                      System call adapters.
* tracing::                     Printing execution traces.
* helpers::                     Helpers.

Appendices

* Package License::             GNU Lesser General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


This document describes version @value{VERSION} of @value{PACKAGE}, a C11 language library; it
implements an interface to non--local exits, which is somewhat similar to exceptions handling.  The
library targets @posix{} systems.

This tiny library will not solve the problem of error handling in the C language, it just brings a
little order in the complexity resulting from hand--coding the error handling logic.
@value{PACKAGE}'s location mechanism has the following purposes:

@enumerate
@item
Implement non--local exits in a way that allows client source code to be shorter and simpler to
understand.

@item
Implement non--local exit handlers to perform synchronous clean--up operations.

@item
Implement a simple architecture for exceptional--condition descriptors.
@end enumerate

@noindent
these features come at the cost of slowing down execution in a possibly sensible way (with respect
to, for example, hand--coded @code{goto} instructions that jump to labels).

@cindex @value{PackageHeaderFile}, header file
@cindex Header file @value{PackageHeaderFile}
@value{PACKAGE} installs the single header file @value{PackageHeaderFile}.  All the function names
in the @api{} are prefixed with @code{@value{PackageApiPrefixLower}}; all the preprocessor symbol
names are prefixed with @code{@value{PackageApiPrefixUpper}}; all the type names are prefixed with
@code{@value{PackageApiPrefixLower}} and suffixed with @code{_t}.

@strong{IMPORTANT} To use the library we must enable the @posix{} features when including the
standard header files; so either we include @file{ccexceptions.h} as first header, or we include the
following definitions before including @strong{all} the header files:

@example
#define _POSIX_C_SOURCE         200809L
@end example

@menu
* overview linking::            Linking code with the library.
@end menu

@include overview-linking.texi

@c page
@node version
@chapter Version functions


The installed libraries follow version numbering as established by the
@gnu{} Autotools.  For an explanation of interface numbers as managed by
@gnu{} Libtool @xref{Libtool versioning, interface, Libtool's versioning
system, libtool, Shared library support for @gnu{}}.


@deftypefun {char const *} cce_version_string (void)
Return a pointer to a statically allocated @asciiz{} string representing
the interface version number.
@end deftypefun


@deftypefun int cce_version_interface_current (void)
Return an integer representing the library interface current number.
@end deftypefun


@deftypefun int cce_version_interface_revision (void)
Return an integer representing the library interface current revision
number.
@end deftypefun


@deftypefun int cce_version_interface_age (void)
Return an integer representing the library interface current age.
@end deftypefun

@c page
@node setjmp
@chapter Brief introduction to non--local exits


Let's recall briefly how the standard, C language, non--local exits mechanism works; for the full
documentation refer to the C Library.  @glibcref{Non-Local Exits, Non-Local Exits}.

To use @cfunc{setjmp} and @cfunc{longjmp} we write chunks of code like the following:

@example
#define JMP_ERROR_CODE          1

jmp_buf  here;

if (setjmp(here))
  @{
    handle_the_error();
  @}
else
  @{
    do_something();
    if (an_error_occurred()) @{
      longjmp(here, JMP_ERROR_CODE);
    @}
    do_something_else();
  @}
@end example

@noindent
this is what happens:

@itemize
@item
When @cfunc{setjmp} is invoked: it saves the current ``location'' in @var{here}, then it returns
zero.

@item
If @cfunc{longjmp} is not applied to @var{here}, nothing strange happens and the execution flow goes
on as usual.

@item
If @cfunc{longjmp} is applied to @var{here}: the execution jumps back to the call to @cfunc{setjmp}
with @code{JMP_ERROR_CODE} as return value.
@end itemize

This mechanism allows us to separate the exception handling code from the main code.  By using
@var{here} as argument to nested function calls: we can perform non--local exits across functions;
something that is not possible with @code{goto} statements.

As always, care must be taken when the body allocates asynchronous resources.  For each resource:
the exception handler must detect if the allocation took place and execute release code.  For
example:

@example
jmp_buf         here;
volatile void * P = NULL;

if (setjmp(here))
  @{
    if (P)
      free(P);
  @}
else
  @{
    ...
    P = malloc(4096);
    ...
  @}
@end example

Let's see some logic example; we will assume the following preamble:

@example
#include <assert.h>
#include <stdlib.h>
#include <setjmp.h>

#define JUMP_TO_ERROR           2
@end example

In the following code no jump is performed; we just call @cfunc{setjmp} once and never call
@cfunc{longjmp}:

@example
jmp_buf         L;
int             flag = 0, code;

code = setjmp(L);
if (code) @{
  flag = 2;
@} else @{
  flag = 1;
@}
assert(0 == code);
assert(1 == flag);
@end example

In the following code we perform a jump and handle the logic with an @code{if} statement:

@example
jmp_buf         L;
int             flag = 0, code;

code = setjmp(L);
if (JUMP_TO_ERROR == code) @{
  flag = 2;
@} else @{
  flag = 1;
  longjmp(L, JUMP_TO_ERROR);
@}
assert(JUMP_TO_ERROR == code);
assert(2 == flag);
@end example

In the following code we perform a jump and handle the logic with a @code{switch} statement:

@example
jmp_buf         L;
int             flag = 0, code;

code = setjmp(L);
switch (code) @{
case JUMP_TO_ERROR:
  flag = 2;
  break;
default:
  flag = 1;
  longjmp(L, JUMP_TO_ERROR);
@}
assert(JUMP_TO_ERROR == code);
assert(2 == flag);
@end example

@c page
@node locations
@chapter The locations @api{}


Non--local exits are a way to transfer execution from one point to another in a program; they are
implemented by the standard C library through the @cfunc{setjmp} and @cfunc{longjmp} functions.
@value{PACKAGE} uses the @posix{} variants @cfunc{sigsetjmp} and @cfunc{siglongjmp}: it does
@strong{not} save the signals mask.

The main usage pattern for this module is the following:

@example
cce_location_t  L[1];

if (CCE_ENTER == cce_location(L)) @{
  /* do something useful here */
  cce_run_body_handlers(L);
@} else @{
  /* handle the exception here */
  cce_run_catch_handlers(L);
  cce_condition_delete(cce_condition(L));
@}
@end example

@noindent
or alternatively the following:

@example
cce_location_t  L[1];

if (cce_location(L)) @{
  /* handle the exception here */
  cce_run_catch_handlers(L);
  cce_condition_delete(cce_condition(L));
@} else @{
  /* do something useful here */
  cce_run_body_handlers(L);
@}
@end example

We can use the slightly shorter versions:

@example
cce_location_t  L[1];

if (CCE_ENTER == cce_location(L)) @{
  /* do something useful here */
  cce_run_body_handlers(L);
@} else @{
  /* handle the exception here */
  cce_run_catch_handlers_final(L);
@}
@end example

@noindent
and:

@example
cce_location_t  L[1];

if (cce_location(L)) @{
  /* handle the exception here */
  cce_run_catch_handlers_final(L);
@} else @{
  /* do something useful here */
  cce_run_body_handlers(L);
@}
@end example


@noindent
it is usually useful to define variables of type @objtype{cce_location_t} as one--element arrays.
When using @value{PACKAGE} we should consider configuring our code editor to automatically insert
this code template.

All the following definitions are accessible from the header file @file{ccexceptions.h}.


@deftp {Struct Typedef} cce_location_t
Struct type representing the location context.  This type is ``derived'' from @objtype{sigjmp_buf}
in the sense that a pointer to @objtype{cce_location_t} is also a pointer to @objtype{sigjmp_buf}.

Instances of this structure reference an instance of type @objtype{cce_condition_t}; it is set by
@cfunc{cce_raise}.  The client code is responsible for releasing resources associated to this value
by retrieving a pointer to it with @cfunc{cce_condition} and releasing it with
@cfunc{cce_condition_delete}.

Before terminating the use of instances of this type we must always call
@cfunc{cce_run_catch_handlers} or @cfunc{cce_run_body_handlers}.  We must assume that the handlers
might access the @objtype{cce_condition_t} object, so: first we call the handlers, then we release
the exceptional--condition object.
@end deftp


@deftp {Pointer Typedef} cce_destination_t
Pointer to @objtype{cce_location_t}.
@end deftp


@deftypefun void cce_location_init (cce_destination_t @var{L})
Initialise the location @var{L}, but do @strong{not} call @cfunc{sigsetjmp}.  We are not meant to
call this function directly; rather we should use the macro @cfunc{cce_location}.
@end deftypefun


@deftypefn {Preprocessor Macro} int cce_location (cce_destination_t @var{L})
Initialise the location @var{L}; call @cfunc{sigsetjmp} and return its return value.
@end deftypefn


@deftypevr Constant int CCE_ENTER
@deftypevrx Constant int CCE_SUCCESS
Constants used by the library as non--local exit codes.  They are defined as @code{0} and represent
the return value of @cfunc{cce_location} at the first evaluation.
@end deftypevr


@deftypevr Constant int CCE_RETRY
This code represents the return value of the @cfunc{setjmp} evaluation after a @cfunc{cce_retry}
call.
@end deftypevr


@deftypevr Constant int CCE_EXCEPT
@deftypevrx Constant int CCE_ERROR
Constants used by the library as non--local exit codes.  They are defined as @code{1} and are the
return value of @cfunc{cce_location} when a non--local exit is performed by @cfunc{cce_raise}.
@end deftypevr


@deftypefun void cce_raise (cce_destination_t @var{L}, cce_condition_t const * @var{C})
Raise an exception associated to the location @var{L}, with exceptional--condition object referenced
by @var{C}.  This function performs the call to @cfunc{siglongjmp} with code @code{CCE_EXCEPT}.

With a call to this function: the client code is put in charge of releasing resources associated to
@var{C}.  If @var{C} is @cnull{}: an internal, statically allocated, exceptional--condition object
is selected to represent an ``unknown exceptional condition''; we can transparently apply the
function @cfunc{cce_condition_delete} to this object.
@end deftypefun


@deftypefun void cce_retry (cce_destinataion_t @var{L})
Jump back to the location @var{L}, reentering the body of the construct.
@end deftypefun


@deftypefn {Generic Macro} {cce_condition_t *} cce_condition (cce_destination_t @var{L})
Return the exceptional--condition object associated to the location @var{L}; this value is
@strong{never} @cnull{}.

If we apply this function to a location without calling @cfunc{cce_raise}: the returned pointer
references an internal, statically allocated, exceptional--condition object representing an
``unknown exceptional condition''; we can transparently apply the function
@cfunc{cce_condition_delete} to this object.
@end deftypefn


As examples of logic, consider the following:

@itemize
@item
If we want to evaluate a body of code and catch its raised exceptions locally, we can use the
following template code:

@example
cce_location_t  L[1];

if (cce_location(L)) @{
  /* handle the exception here */
  cce_run_catch_handlers_final(L);
@} else @{
  /* do something useful here */
  cce_run_body_handlers(L);
@}
@end example

@item
If we want to evaluate a body of code, catch its raised exceptions locally and then re--raise them
to another location, we can use the following template code:

@example
void
outer (void)
@{
  cce_location_t  L[1];

  if (cce_location(L)) @{
    /* handle the exception here */
    cce_run_catch_handlers_final(L);
  @} else @{
    inner(L);
    cce_run_body_handlers(L);
  @}
@}

void
inner (cce_location_t * there)
@{
  cce_location_t  L[1];

  if (cce_location(L)) @{
    cce_run_catch_handlers(L);
    cce_raise(there, cce_condition(L));
  @} else @{
    /* do something useful here */
    cce_run_body_handlers(L);
  @}
@}
@end example
@end itemize

@c page
@node handlers
@chapter The location handlers @api{}


Location handlers allow us to execute callback functions whenever we exit a location context, either
by normal execution or by raising an exception.  Normal--execution handlers are run by calling the
function @cfunc{cce_run_body_handlers}; exception--reaction handlers are run by calling the function
@cfunc{cce_run_catch_handlers}, but we should use the more useful functions
@cfunc{cce_run_catch_handlers_final} and @cfunc{cce_run_catch_handlers_raise}.

The basic code template is the following:

@example
cce_location_t  L[1];

if (cce_location(L)) @{
  /* location handler */
  cce_run_catch_handlers_final(L);
@} else @{
  /* location body */
  cce_run_body_handlers(L);
@}
@end example

@value{PACKAGE} defines @dfn{clean handlers}, which are run as both normal--execution and
exception-reaction handlers; it also defines @dfn{error handlers}, which are run only as
exception-reaction handlers.

@menu
* handlers typedefs::           Handlers type definitions.
* handlers registering::        Registering location handlers.
* handlers accessing::          Accessing location handlers.
* handlers running::            Running location handlers.
* handlers handlers::           Running handlers from handlers.
* handlers examples::           Examples of location handlers usage.
@end menu

@c page
@node handlers typedefs
@section Handlers type definitions


All the following definitions are accessible from the header file @file{ccexceptions.h}.


@deftp {Struct Typedef} cce_handler_t
Core structure type representing an exception handler, either a clean handler or an error handler.
We should @strong{never} use this type directly, rather we should use the wrapper types
@objtype{cce_clean_handler_t} and @objtype{cce_error_handler_t}.

The structure has the following public fields:

@table @code
@item cce_handler_fun_t * function
Pointer to the callback function implementing the exception handler.

@item void * pointer
Pointer available to the client code.
@end table
@end deftp


@deftp {Struct Typedef} cce_clean_handler_t
Structure representing a clean handler.  Instances of this type are associated to a location by
calling the function @cfunc{cce_register_clean_handler}.  Clean handlers are invoked by calling one
of the functions: @cfunc{cce_run_body_handlers}, @cfunc{cce_run_catch_handlers} and its variants.
Before terminating the use of a @objtype{cce_location_t} instance: we must always call the handlers,
whether or not an exception was raised.

It has the following public fields:

@table @code
@item cce_handler_t handler
The handler structure.
@end table
@end deftp


@deftp {Struct Typedef} cce_error_handler_t
Structure representing an error handler.  Instances of this type are associated to a location by
calling the function @cfunc{cce_register_error_handler}.  Error handlers are invoked by calling the
function @cfunc{cce_run_catch_handlers} or one of its variants.  Before terminating the use of a
@objtype{cce_location_t} instance: after an exception is raised we must always call the error
handlers.

It has the following public fields:

@table @code
@item cce_handler_t handler
The handler structure.
@end table
@end deftp


When needed, we are meant to wrap instances of @objtype{cce_clean_handler_t} and
@objtype{cce_error_handler_t} into an enclosing struct definition as follows:

@example
struct resource_clean_handler_t @{
  cce_clean_handler_t 	handler;
  void *		resourcep;
@};
@end example

@noindent
in which the instance of @code{cce_clean_handler_t} is the first field.


@deftypefn {Function Typedef} void cce_handler_fun_t (cce_condition_t const * @var{C}, cce_handler_t * @var{H})
Type of exception handler functions meant to release some asynchronous resource.  The argument
@var{C} references a structure representing the raised exceptional--condition object; the handler
must leave it untouched, it must @strong{not} mutate or release it.  The argument @var{H} references
the handler context.

If an error occurs: the handler function must take care of itself and return to the caller, it must
@strong{not} raise an exceptional condition and jump to a remote location.

If the structure referenced by @var{H} is dynamically allocated: the handler function is responsible
to release its memory.
@end deftypefn

@c page
@node handlers registering
@section Registering location handlers


All the following definitions are accessible from the header file @file{ccexceptions.h}.


@deftypefun void cce_handler_set (cce_handler_t * @var{H}, void * @var{pointer}, cce_handler_fun_t * @var{fun})
@deftypefunx void cce_clean_handler_set (cce_handler_t * @var{H}, void * @var{pointer}, cce_handler_fun_t * @var{fun})
@deftypefunx void cce_error_handler_set (cce_handler_t * @var{H}, void * @var{pointer}, cce_handler_fun_t * @var{fun})
Set the fields @code{pointer} and @code{function} of the handler referenced by @var{H} to the values
@var{pointer} and @var{fun}.
@end deftypefun


@deftypefun void cce_register_clean_handler (cce_destination_t @var{L}, cce_clean_handler_t * @var{H})
Register the clean handler referenced by @var{H} in the list of handlers associated to the location
@var{L}.  The pointer @var{H} must reference an instance of structure whose first field is a
structure of type @code{cce_clean_handler_t}; such structure can either be allocated on the same
stack frame of the function also defining the location object @var{L}, or be dynamically allocated
on the heap.

A clean handler is meant to be called whenever the execution flow leaves the dynamic extent of a
location, whether with an exception or as part of the successful execution path.
@end deftypefun


@deftypefun void cce_register_error_handler (cce_destination_t @var{L}, cce_error_handler_t * @var{H})
Register the error handler referenced by @var{H} in the list of handlers associated to the location
@var{L}.  The pointer @var{H} must reference an instance of structure whose first field is a
structure of type @code{cce_error_handler_t}; such structure can either be allocated on the same
stack frame of the function also defining the location object @var{L}, or be dynamically allocated
on the heap.

An error handler is meant to be called whenever the execution flow leaves the dynamic extent of a
location in case of an exceptional condition; it must @strong{not} be called as part of the
successful execution path.
@end deftypefun


@deftypefn {Preprocessor Macro} void cce_register_handler (cce_destination_t @var{L}, cce_clean_handler_t * @var{H})
@deftypefnx {Preprocessor Macro} void cce_register_handler (cce_destination_t @var{L}, cce_error_handler_t * @var{H})
Generic macro which using @code{_Generic} to dispatch its expansion depending on the type of the
argument @var{H}.  If the type of structure referenced by @var{H} is:

@table @objtype
@item cce_clean_handler_t
The macro expands into a call to @cfunc{cce_register_clean_handler}.

@item cce_error_handler_t
The macro expands into a call to @cfunc{cce_register_error_handler}.
@end table
@end deftypefn


@deftypefun void cce_forget_handler (cce_destination_t @var{L}, cce_handler_t * @var{H})
Remove the handler @var{H} from the context of the location @var{L}.  If @var{H} is not registered
in @var{L}: nothing happens.
@end deftypefun

@c page
@node handlers accessing
@section Accessing location handlers


@deftypefun {cce_handler_t *} cce_clean_handler_handler (cce_clean_handler_t * @var{H})
@deftypefunx {cce_handler_t *} cce_error_handler_handler (cce_error_handler_t * @var{H})
Given a pointer to clean or error handler, return a pointer to the embedded handler.
@end deftypefun


@defmac cce_handler_handler (cce_clean_handler_t * @var{H})
@defmacx cce_handler_handler (cce_error_handler_t * @var{H})
Generic macro which using @code{_Generic} to dispatch its expansion depending on the type of the
argument @var{H}.  If the type of structure referenced by @var{H} is:

@table @objtype
@item cce_clean_handler_t
The macro expands into a call to @cfunc{cce_clean_handler_handler}.

@item cce_error_handler_t
The macro expands into a call to @cfunc{cce_error_handler_handler}.
@end table
@end defmac

@c page
@node handlers running
@section Running location handlers


All the following definitions are accessible from the header file @file{ccexceptions.h}.


@deftypefun void cce_run_body_handlers (cce_destination_t @var{L})
@deftypefunx void cce_run_clean_handlers (cce_destination_t @var{L})
Run all the clean handlers associated to the location @var{L}.  Each handler must return to its
caller, taking care of itself regarding internal error handling and asynchronous resources
allocation.  Handlers are called starting from the last registered one.

This is a destructive function: once the list has been traversed, it is not valid anymore.  When the
handler function is applied to the handler structure: the handler structure is completely detached
from the context of @var{L}, so it can be finalised and its memory released.
@end deftypefun


@deftypefun void cce_run_catch_handlers (cce_destination_t @var{L})
@deftypefunx void cce_run_error_handlers (cce_destination_t @var{L})
Run all the clean and error handlers associated to the location @var{L}.  Each handler must return
to its caller, taking care of itself regarding internal error handling and asynchronous resources
allocation.  Handlers are called starting from the last registered one.

This is a destructive function: once the list has been traversed, it is not valid anymore.  When the
handler function is applied to the handler structure: the handler structure is completely detached
from the context of @var{L}, so it can be finalised and its memory released.

@strong{NOTE} This function must assume that an error handler might access the
exceptional--condition object associated to @var{L} upon raising the exception, so this function
should always be called @strong{before} applying @cfunc{cce_condition_delete} to the return value of
@code{cce_condition(@var{L})}.
@end deftypefun


@deftypefun void cce_run_catch_handlers_final (cce_destination_t @var{L})
@deftypefunx void cce_run_error_handlers_final (cce_destination_t @var{L})
Equivalent to calling:

@example
cce_run_catch_handlers(L);
cce_condition_delete(cce_condition(L));
@end example
@end deftypefun


@deftypefun void cce_run_body_handlers_final (cce_destination_t @var{L})
@deftypefunx void cce_run_clean_handlers_final (cce_destination_t @var{L})
Equivalent to calling:

@example
cce_run_body_handlers(L);
cce_condition_delete(cce_condition(L));
@end example
@end deftypefun


@deftypefun void cce_run_catch_handlers_raise (cce_destination_t @var{L}, cce_location_t * @var{upper_L})
@deftypefunx void cce_run_error_handlers_raise (cce_destination_t @var{L}, cce_location_t * @var{upper_L})
Equivalent to calling:

@example
cce_run_catch_handlers(L);
cce_raise(upper_L, cce_condition(L));
@end example
@end deftypefun


@deftypefun void cce_run_body_handlers_raise (cce_destination_t @var{L}, cce_location_t * @var{upper_L})
@deftypefunx void cce_run_clean_handlers_raise (cce_destination_t @var{L}, cce_location_t * @var{upper_L})
Equivalent to calling:

@example
cce_run_body_handlers(L);
cce_raise(upper_L, cce_condition(L));
@end example
@end deftypefun

@c page
@node handlers handlers
@section Running handlers from handlers


It is sometimes useful to execute complex code in an exception--handler code block; for example we
may need to map a set of exceptional--condition objects into another set.  Whenever an
exception--handler code block needs to handle exceptions itself, we must register the outer handlers
as inner handlers; @value{PACKAGE} offers functions to do this with ease.

The basic code template is this:

@example
cce_location_t  outer_L[1];

if (cce_location(outer_L)) @{
  /* outer exception handler */
  cce_location_t  inner_L[1];

  if (cce_location(inner_L)) @}
    /* inner exception handler */
    cce_run_catch_handlers_final(inner_L);
  @} else @{
    /* inner body */
    cce_run_body_handlers(inner_L);
  @}
@} else @{
  /* outer body */
  cce_run_body_handlers(outer_L);
@}
@end example

@menu
* handlers handlers cc::        Using a clean handler to run clean handlers.
* handlers handlers ce::        Using a clean handler to run error handlers.
* handlers handlers ec::        Using an error handler to run clean handlers.
* handlers handlers ee::        Using an error handler to run error handlers.
@end menu

@c page
@node handlers handlers cc
@subsection Using a clean handler to run clean handlers


@deftypefun void cce_register_clean_handler_to_run_body_handlers (cce_destination_t @var{inner_L}, cce_clean_handler_t * @var{inner_H}, cce_destination_t @var{outer_L})
Register the clean handler @var{inner_H}, in the context of the location @var{inner_L}, so that it
will run the clean handlers registered for the location @var{outer_L}.  The exceptional--condition
object associated to @var{outer_L} will be deleted by the handler.
@end deftypefun


We can use this function as follows:

@example
cce_location_t  outer_L[1];

if (cce_location(outer_L)) @{
  /* outer exception handler */
  cce_location_t       inner_L[1];
  cce_clean_handler_t  inner_H[1];

  if (cce_location(inner_L)) @}
    /* inner exception handler */
    cce_run_catch_handlers_final(inner_L);
  @} else @{
    cce_register_clean_handler_to_run_body_handlers
       (inner_L, inner_H, outer_L);
    /* inner body */
    cce_run_body_handlers(inner_L);
  @}
@} else @{
  /* outer body */
  cce_run_body_handlers(outer_L);
@}
@end example

@c page
@node handlers handlers ce
@subsection Using a clean handler to run error handlers


@deftypefun void cce_register_clean_handler_to_run_catch_handlers (cce_destination_t @var{inner_L}, cce_clean_handler_t * @var{inner_H}, cce_destination_t @var{outer_L})
Register the clean handler @var{inner_H}, in the context of the location @var{inner_L}, so that it
will run the error handlers registered for the location @var{outer_L}.  The exceptional--condition
object associated to @var{outer_L} will be deleted by the handler.
@end deftypefun


We can use this function as follows:

@example
cce_location_t  outer_L[1];

if (cce_location(outer_L)) @{
  /* outer exception handler */
  cce_location_t       inner_L[1];
  cce_clean_handler_t  inner_H[1];

  if (cce_location(inner_L)) @}
    /* inner exception handler */
    cce_run_catch_handlers_final(inner_L);
  @} else @{
    cce_register_clean_handler_to_run_catch_handlers
       (inner_L, inner_H, outer_L);
    /* inner body */
    cce_run_body_handlers(inner_L);
  @}
@} else @{
  /* outer body */
  cce_run_body_handlers(outer_L);
@}
@end example

@c page
@node handlers handlers ec
@subsection Using an error handler to run clean handlers


@deftypefun void cce_register_error_handler_to_run_body_handlers (cce_destination_t @var{inner_L}, cce_error_handler_t * @var{inner_H}, cce_destination_t @var{outer_L})
Register the error handler @var{inner_H}, in the context of the location @var{inner_L}, so that it
will run the clean handlers registered for the location @var{outer_L}.  The exceptional--condition
object associated to @var{outer_L} will be deleted by the handler.
@end deftypefun


We can use this function as follows:

@example
cce_location_t  outer_L[1];

if (cce_location(outer_L)) @{
  /* outer exception handler */
  cce_location_t       inner_L[1];
  cce_error_handler_t  inner_H[1];

  if (cce_location(inner_L)) @}
    /* inner exception handler */
    cce_run_catch_handlers_final(inner_L);
  @} else @{
    cce_register_error_handler_to_run_body_handlers
       (inner_L, inner_H, outer_L);
    /* inner body */
    cce_run_body_handlers(inner_L);
  @}
@} else @{
  /* outer body */
  cce_run_body_handlers(outer_L);
@}
@end example

@c page
@node handlers handlers ee
@subsection Using an error handler to run error handlers


@deftypefun void cce_register_error_handler_to_run_catch_handlers (cce_destination_t @var{inner_L}, cce_error_handler_t * @var{inner_H}, cce_destination_t @var{outer_L})
Register the error handler @var{inner_H}, in the context of the location @var{inner_L}, so that it
will run the error handlers registered for the location @var{outer_L}.  The exceptional--condition
object associated to @var{outer_L} will be deleted by the handler.
@end deftypefun


We can use this function as follows:

@example
cce_location_t  outer_L[1];

if (cce_location(outer_L)) @{
  /* outer exception handler */
  cce_location_t       inner_L[1];
  cce_error_handler_t  inner_H[1];

  if (cce_location(inner_L)) @}
    /* inner exception handler */
    cce_run_catch_handlers_final(inner_L);
  @} else @{
    cce_register_error_handler_to_run_catch_handlers
       (inner_L, inner_H, outer_L);
    /* inner body */
    cce_run_body_handlers(inner_L);
  @}
@} else @{
  /* outer body */
  cce_run_body_handlers(outer_L);
@}
@end example

@c page
@node handlers examples
@section Examples of location handlers usage

@menu
* handlers examples mech::      Examples of basic mechanisms.
* handlers examples clean::     Example of asynchronous resource handling
                                using a clean handler.
* handlers examples error::     Example of asynchronous resource handling
                                using an error handler.
@end menu

@c page
@node handlers examples mech
@subsection Examples of basic mechanisms


We could define and call a list of clean handlers as follows:

@example
void
handler1 (cce_condition_t const * C, cce_handler_t * H)
@{
  do_some_cleanup();
@}
void
handler2 (cce_condition_t const * C, cce_handler_t * H)
@{
  do_some_cleanup();
@}
void
handler3 (cce_condition_t const * C, cce_handler_t * H)
@{
  do_some_cleanup();
@}

void
func (void)
@{
  cce_location_t       L[1];
  cce_clean_handler_t  H1 = @{ .handler.function = handler1 @};
  cce_clean_handler_t  H2 = @{ .handler.function = handler2 @};
  cce_clean_handler_t  H3 = @{ .handler.function = handler3 @};

  cce_location_init(L);
  cce_register_clean_handler(L, &H1);
  cce_register_clean_handler(L, &H2);
  cce_register_clean_handler(L, &H3);
  cce_run_body_handlers(L);
@}
@end example

@noindent
and we could define and call a list of error handlers as follows:

@example
void
handler1 (cce_condition_t const * C, cce_handler_t * H)
@{
  do_some_error_handling();
@}
void
handler2 (cce_condition_t const * C, cce_handler_t * H)
@{
  do_some_error_handling();
@}
void
handler3 (cce_condition_t const * C, cce_handler_t * H)
@{
  do_some_error_handling();
@}

void
func (void)
@{
  cce_location_t       L[1];
  cce_error_handler_t  H1 = @{ .handler.function = handler1 @};
  cce_error_handler_t  H2 = @{ .handler.function = handler2 @};
  cce_error_handler_t  H3 = @{ .handler.function = handler3 @};

  cce_location_init(L);
  cce_register_error_handler(L, &H1);
  cce_register_error_handler(L, &H2);
  cce_register_error_handler(L, &H3);
  cce_run_catch_handlers(L);
@}
@end example

@c page
@node handlers examples clean
@subsection Example of asynchronous resource handling using a clean handler


Let's say we need to allocate memory with @cfunc{malloc}, and to release it with @cfunc{free}
whenever the dynamic extent of the local function terminates; we can use built--in functions for
this, @ref{system memory} for details.  To show the mechanism, in the following example: we
implement a handler explicitly.

@example
void
P_handler (cce_condition_t const * C, cce_handler_t * H)
@{
  free(H->pointer);
@}

void
func (void)
@{
  cce_location_t       L[1];
  cce_clean_handler_t  P_H;

  if (cce_location(L)) @{
    cce_run_catch_handlers_final(L);
  @} else @{
    void *  P;

    errno = 0;
    P = malloc(4096);
    if (P) @{
      P_H.handler.function = P_handler;
      P_H.handler.pointer  = P;
      cce_register_clean_handler(L, &P_H);
    @} else @{
      cce_raise(L, cce_condition_new_errno_clear(errno));
    @}
    do_something(L, P);
    cce_run_body_handlers(L);
  @}
@}
@end example

@noindent
whether @cfunc{do_something} raises an exception or not: the clean handler is invoked and the memory
is released.

@c page
@node handlers examples error
@subsection Example of asynchronous resource handling using an error handler


Let's say we are writing a constructor function and we need to allocate memory, do something and:

@itemize
@item
If successful: return the memory to the caller.

@item
If an error occurs: release the memory locally.
@end itemize

We can organise the code as follows, using an error handler in the constructor and a clean handler
in the caller:

@example
void
P_handler (cce_condition_t const * C, cce_handler_t * H)
@{
  free(H->pointer);
@}

void *
constructor (cce_destination_t upper_L)
@{
  cce_location_t       L[1];
  cce_error_handler_t  P_H;

  if (cce_location(L)) @{
    cce_run_catch_handlers_raise(L, upper_L);
  @} else @{
    void *  P;

    errno = 0;
    P = malloc(4096);
    if (P) @{
      P_H.handler.function = P_handler;
      P_H.handler.pointer  = P;
      cce_register_error_handler(L, &P_H);
    @} else @{
      cce_raise(L, cce_condition_new_errno_clear(errno));
    @}

    /* If this function raises an exception: the error
       handler releases the memory. */
    do_some_initialisation(L, P);

    cce_run_body_handlers(L);
  @}
  return P;
@}

void caller (void)
@{
  cce_location_t       L[1];
  cce_clean-handler_t  P_H;

  if (cce_location(L)) @{
    cce_run_catch_handlers_final(L);
  @} else @{
    void *  P;

    P = constructor(L);
    @{
      P_H.handler.function = P_handler;
      P_H.handler.pointer  = P;
      cce_register_clean_handler(L, &P_H);
    @}
    do_something_with(P);
    cce_run_body_handlers(L);
  @}
@}
@end example

@c page
@node conditions
@chapter Exceptional condition descriptors


In the context of the @value{PACKAGE} framework, we represent exceptional conditions with a tree
hierarchy of data structures; this way it is possible to react to a raised exception by branching at
runtime according to the type of raised structure.

@menu
* conditions intro::            Introduction to exceptional-condition objects.
* conditions descriptors::      Exceptional-condition object-type descriptors.
* conditions objects::          Exceptional-condition objects.
* conditions root::             The @emph{root} exceptional-condition object.
* conditions unknown::          The @emph{unknown} exceptional-condition object.
* conditions break::            The @emph{break} exceptional-condition object.
* conditions error::            The @emph{error} exceptional-condition object.
* conditions runtime error::    The @emph{runtime error} exceptional-condition
                                object.
* conditions logic error::      The @emph{logic error} exceptional-condition
                                object.
* conditions unimplemented::    The @emph{unimplemented} exceptional-condition
                                object.
* conditions invalid arg::      The @emph{invalid argument} exceptional-condition
                                object.
* conditions unreachable::      The @emph{unreachable code} exceptional-condition
                                object.
* conditions errno::            The @code{errno} exceptional-condition object.
* conditions math::             The mathematical exceptional-condition objects.
* conditions custom::           Defining custom exceptional-condition
                                object-types.
@end menu

@c page
@node conditions intro
@section Introduction to exceptional--condition objects


The purpose of @value{PACKAGE}'s exceptional--condition objects module is to allow us to write code
like this:

@example
cce_location_t  L[1];

if (cce_location(L)) @{
  // handle the exceptional condition
  if (my_condition_is_alpha(cce_condition(L)))
    @{
      // react to exception "alpha"
    @}
  else if (my_condition_is_beta(cce_condition(L)))
    @{
      // react to exception "beta"
    @}
  else
    @{
      // default reaction to any exception
    @}
  cce_run_catch_handlers_final(L);
@} else @{
  // do something useful
  cce_run_body_handlers(L);
@}
@end example

@noindent
in which we use some, previously defined, exceptional--condition object--types @samp{alpha} and
@samp{beta}.

If we need to hand the exceptional--condition object to an upper level location we can do it as
follows:

@example
void
upper_function (void)
@{
  cce_location_t        L[1];

  if (cce_location(L)) @{
    fprintf(stderr, "log: %s\n", \
        cce_condition_static_message(cce_condition(L)));
    cce_run_catch_handlers_final(L);
  @} else @{
    lower_function(L);
    cce_run_body_handlers(L);
  @}
@}

void
lower_function (cce_location_t * upper_L)
@{
  cce_location_t        L[1];

  if (cce_location(L)) @{
    cce_run_catch_handlers_raise(L, upper_L);
  @} else @{
    do_something();
    if (an_error_occurred()) @{
      cce_raise(L, select_condition_object());
    @}
   cce_run_body_handlers(L);
  @}
@}
@end example

From the point of view of our ability to react to an exception at runtime: a flexible situation is
the one in which the exceptional--condition object--types are organised in a tree hierarchy.  It
allows us to select the level of granularity we desire in the branching logic.  The tree hierarchy
implemented by @value{PACKAGE} uses single inheritance; multiple inheritance would be more general,
but also more complex.

@c ------------------------------------------------------------------------

@subsubheading How the hierarchy is implemented

Exceptional--condition objects are C language structures referencing a type descriptor, which is
also a C language structure.  Type descriptors are usually statically allocated and mostly have a
hard--coded initialisation.  Exceptional--condition objects are either dynamically allocated and
initialised or statically allocated with hard--coded initialisation.

Every type descriptor data structure encloses a data structure of type @objtype{cce_descriptor_t},
which must be its first field.  The instances of @objtype{cce_descriptor_t} hold the pointers that
define the tree hierarchy; every type descriptor can be referenced by multiple
exceptional--condition objects: it can represent the type of multiple objects; every type descriptor
has a single parent and can have zero, one or more children.  Each pointer to
@objtype{cce_descriptor_t} is a unique runtime value identifying the type of
exceptional--condition objects.

Every exceptional--condition object's data structure encloses a data structure of type
@objtype{cce_condition_t}, which must be its first field.  The exceptional--condition object holds a
pointer to the associated type descriptor.

The root of the tree is represented by the object--type descriptor @objtype{cce_descriptor_root_t}
and objects of such type are @code{struct} of type @objtype{cce_condition_root_t}.  We can think of
the root structure types as follows:

@smallexample
typedef struct cce_condition_root_t     cce_descriptor_root_t;
typedef struct cce_condition_root_t     cce_condition_root_t;

struct cce_descriptor_root_t @{
  cce_descriptor_t	descriptor;
@};

struct cce_condition_root_t @{
  cce_condition_t	condition;
@};

extern cce_descriptor_root_t const * const cce_descriptor_root_ptr;
@end smallexample

We declare the @code{struct} types needed to define a new exceptional--condition object--type, child
of the @emph{root} type, as follows:

@smallexample
typedef struct my_descriptor_error_t  my_descriptor_error_t;
typedef struct my_condition_error_t   my_condition_error_t;

struct my_descriptor_error_t @{
  cce_descriptor_t  descriptor;
  /* Put some custom fields here. */
@};

struct my_condition_error_t @{
  cce_condition_root_t  root;
  /* Put some custom fields here. */
@};
@end smallexample

@noindent
the field of type @objtype{cce_descriptor_t} is the first in its data structure type; the field of
type @objtype{cce_condition_root_t} is the first in its data structure type.

In the following picture: the @emph{alpha} descriptor is a child of the @emph{root} descriptor; the
@emph{beta} descriptor is a child of the type @samp{alpha} descriptor.  We can say that:

@itemize
@item
An exceptional--condition object of type @emph{alpha} is also of type @emph{root}.

@item
An exceptional--condition object of type @emph{beta} is also of type @emph{alpha} and of type
@emph{root}.
@end itemize

@example
 -----------------
| descriptor root |
 -----------------
         ^
         |
 ------------------       --------------
| descriptor alpha | <-- | object alpha |
 ------------------       --------------
         ^
         |
 -----------------        -------------
| descriptor beta | <--- | object beta |
 -----------------        -------------
@end example

The data types that represent such hierarchy look as follows:

@smallexample
typedef struct my_descriptor_alpha_t my_descriptor_alpha_t;
typedef struct my_descriptor_beta_t  my_descriptor_beta_t;
typedef struct my_condition_alpha_t  my_condition_alpha_t;
typedef struct my_condition_beta_t   my_condition_beta_t;

/*** Descriptors types. ***/

struct my_descriptor_alpha_t @{
  cce_descriptor_t  descriptor;
@};

struct my_descriptor_beta_t @{
  cce_descriptor_t  descriptor;
@};

/*** Object types. ***/

struct my_condition_alpha_t @{
  cce_condition_root_t  root;
@};

struct my_condition_beta_t @{
  my_condition_alpha_t  alpha;
@};
@end smallexample

@noindent
we can statically allocate and initialise the type descriptors as follows:

@smallexample
my_descriptor_alpha_t my_descriptor_alpha = @{
  .descriptor.parent = NULL
@};

my_descriptor_beta_t  my_descriptor_beta  = @{
  .descriptor.parent = &my_descriptor_alpha.descriptor
@};

void
initialisation_function (void)
@{
  cce_descriptor_set_parent_to(cce_descriptor_root_t) \
    (&my_descriptor_alpha.descriptor);
@}
@end smallexample

@c page
@node conditions descriptors
@section Exceptional--condition object--type descriptors


All the following definitions are accessible from the header file @file{ccexceptions.h}.


@deftp {Struct Typedef} cce_descriptor_t
Structure type representing exceptional--condition object--type descriptors; it holds a table
of function pointers to handle exceptional--condition objects.  It has the following fields:

@table @code
@item cce_descriptor_t const * parent
Pointer to the descriptor that is parent of this one in the tree hierarchy.  This pointer is set to
@cnull{} only for the root condition descriptor, @xref{conditions root, Predefined root condition
descriptor}.

@item cce_condition_final_fun_t * delete
Pointer to function releasing the exceptional--condition object's memory block itself.  This pointer
can be @cnull{}, meaning that: the object is statically allocated.

@item cce_condition_final_fun_t * final
Pointer to function releasing all the dynamic resources associated to the exceptional--condition
object.  This pointer can be @cnull{}, meaning that: there are no dynamic resources.

@item cce_condition_static_message_fun_t * static_message
Pointer to function returning a statically allocated @asciiz{} string describing the
exceptional--condition.
@end table
@end deftp


@deftypefn {Function Prototype} void cce_condition_final_fun_t (cce_condition_t * @var{C})
Release all the dynamic resources associated to @var{C}; leave untouched the memory block holding
the @objtype{cce_condition_t} instance itself.
@end deftypefn


@deftypefn {Function Prototype} void cce_condition_delete_fun_t (cce_condition_t * @var{C})
Release the memory block referenced by @var{C}, if appropriate.  If the structure is allocated with
@cfunc{malloc}, the @code{delete} function can just be:

@example
void
my_condition_delete_stuff (my_condition_stuff_t * C)
@{
  free(C);
@}
@end example
@end deftypefn


@deftypefn {Function Prototype} {char const *} cce_condition_static_message_fun_t (cce_condition_t const * @var{C})
Return a statically allocated @asciiz{} string describing the exceptional--condition.  A static
message must always be defined; another client--defined function can build a dynamic and more
descriptive message.

For example, an instance of this function can be:

@example
char const *
my_condition_static_message_stuff (my_condition_stuff_t const * C)
@{
  return "error doing stuff";
@}
@end example
@end deftypefn


@deftypefun bool cce_descriptor_child_and_ancestor (cce_descriptor_t const * @var{child}, cce_descriptor_t const * @var{ancestor})
Establish if two condition descriptors are child and ancestor.  Return @ctrue{} if @var{child} is
equal to @var{ancestor} or @var{ancestor} is in the hierarchy of @var{child}'s ancestors; otherwise
return @cfalse{}.
@end deftypefun


@deftypefn {Generic Macro} {cce_descriptor_t *} cce_descriptor (@var{X})
This generic macro dispatches its expansion according to its argument's type:

@itemize
@item
Given a pointer to condition object: retrieve the pointer to its descriptor and cast it to a pointer
to @objtype{cce_descriptor_t}.

@item
Given a pointer to condition descriptor: cast it to a pointer to @objtype{cce_descriptor_t}.
@end itemize

This generic macro performs compile--time type--checking so that the cast operation is applied only
on values of suitable types; we can apply this macro to pointers to all the types defined by
@value{PACKAGE} for which it makes sense.
@end deftypefn


@defmac cce_descriptor_set_parent_to (@var{TYPE})
Expand into the name of a function that we can use to set the parent of a descriptor to the given
@var{TYPE} descriptor.
@end defmac


@defmac cce_descriptor_pointer (@var{EXCEPTIONAL_CONDITION_DESCRIPTOR_VARIABLE})
Expand into:

@example
&((@var{EXCEPTIONAL_CONDITION_DESCRIPTOR_VARIABLE}).descriptor)
@end example

Given an exceptional-condition descriptor @struct{} defined as:

@example
typedef struct descr_t  descr_t;

struct descr_t @{
  cce_descriptor_t      descriptor;
@};

descr_t my_descriptor_descr = @{ ... @};
@end example

@noindent
this macro is used as:

@example
cce_descriptor_pointer(my_descriptor_descr)
@end example

@noindent
to expand into:

@example
&((my_descriptor_descr).descriptor)
@end example
@end defmac

@c page
@node conditions objects
@section Exceptional-condition objects


All the following definitions are accessible from the header file @file{ccexceptions.h}.


@deftp {Struct Typedef} cce_condition_t
Type of structure representing an exceptional--condition object.  It has the following public
fields:

@table @code
@item cce_descriptor_t const * descriptor
Pointer to the descriptor of the exceptional--condition object--type.
@end table
@end deftp


@deftypefun void cce_condition_init (cce_condition_t * @var{C}, cce_descriptor_t const * @var{D})
Initialise the core fields of an already allocated condition object.  The argument @var{D} must be a
pointer to the descriptor: it is stored in the object referenced by @var{C}.  This function is
usually called from a type--specific constructor function.
@end deftypefun


@deftypefun void cce_condition_final (cce_condition_t * @var{C})
@strong{Usually we do not need to call this function directly; rather, we should use
@cfunc{cce_condition_delete}.}

Traverse, from leaf to root, the hierarchy of descriptors for the type of the exceptional--condition
object referenced by @var{C}: apply to @var{C} the @code{final} functions referenced by the
descriptors' functions tables.  The finalisation functions are applied from leaf to root.
@end deftypefun


@deftypefun void cce_condition_delete (cce_condition_t * @var{C})
Apply @cfunc{cce_condition_final} to @var{C}; then apply to @var{C} the @code{delete} function
referenced by the descriptor's functions table.
@end deftypefun


@deftypefun {char const *} cce_condition_static_message (cce_condition_t const * @var{C})
Apply to @var{C} the @code{static_message} function referenced by its descriptor's functions
table.
@end deftypefun


@deftypefun bool cce_condition_is (cce_condition_t const * @var{C}, cce_descriptor_t const * @var{D})
Determine if an object is of a selected object--type.  Return @ctrue{} if the object referenced by
@var{C} is an instance of the type whose descriptor is referenced by @var{D}, or an instance of a
type that is an ancestor of such descriptor; otherwise return @cfalse{}.
@end deftypefun


@deftypefn {Generic Macro} {cce_condition_t *} cce_condition (@var{X})
This generic macro dispatches its expansion according to its argument's type:

@itemize
@item
Given a pointer to @objtype{cce_location_t}: retrieve a pointer to the associated condition object
and cast it to a pointer to @objtype{cce_condition_t}.

@item
Given a pointer to condition object: cast it to a pointer to @objtype{cce_condition_t}.
@end itemize

This generic macro performs compile--time type--checking so that the cast operation is applied only
on values of suitable types; we can apply this macro to pointers to all the types defined by
@value{PACKAGE} for which it makes sense.

This macro allows us to compare pointers without raising a warning:

@example
cce_condition_errno_t * A = ...;
cce_condition_t *       B = ...;

/* This raises a warning: */
A == B;

/* This does not raise a warning: */
cce_condition(A) == cce_condition(B);
@end example
@end deftypefn

@c page
@node conditions root
@section The @emph{root} exceptional--condition object


@ExceptionalConditionIndexEntries{root}


The @dfn{root} exceptional--condition object--type descriptor has the only purpose of being the root
of the descriptors tree; there should be no exceptional--condition objects having this as
descriptor.  The @emph{root} descriptor has @code{parent} field set to @cnull{}; this must be the
only descriptor with such a property.

All the following definitions are accessible from the header file @file{ccexceptions.h}.


@deftp {Struct Typedef} cce_descriptor_root_t
Structure type representing the @emph{root} exceptional--condition object--type descriptor,
the root of the descriptors hierarchy tree.  This descriptor has a single instance built into the
library.  It has the following public fields:

@table @code
@item cce_descriptor_t descriptor
Core values of the exceptional--condition object--type descriptor.
@end table
@end deftp


@deftp {Struct Typedef} cce_condition_root_t
Structure type representing the @emph{root} exceptional--condition object; this @code{struct}
type must never be instantiated.  It has the following public fields:

@table @code
@item cce_condition_t condition
Core values of the exceptional--condition object.
@end table
@end deftp


@deftypefun bool cce_condition_is_root (cce_condition_t const * @var{C})
Return @ctrue{} if the object referenced by @var{C} is derived from the @emph{root} type; otherwise
return @cfalse{}.  With a correctly built conditions hierarchy: this function always returns
@ctrue{}.
@end deftypefun

@c ------------------------------------------------------------------------

@CCEConditionSubtypingFacilities{cce,root}

@c ------------------------------------------------------------------------

@ConditionSubtypingExample{root, root}

@c page
@node conditions unknown
@section The @emph{unknown} exceptional--condition object


@ExceptionalConditionIndexEntries{unknown}


The @dfn{unknown} exceptional--condition object--type has the purpose of describing an
exceptional--condition with unknown cause; it should be used only by the function @cfunc{cce_raise}
when the condition object argument is set to @cnull{}.

There should be only one @emph{unknown} exceptional--condition object: the one predefined by
@value{PACKAGE} and built into the library as statically allocated structure.  Subtyping from the
@emph{unknown} type is discouraged.

All the following definitions are accessible from the header file @file{ccexceptions.h}.


@CCEDescriptorTypedef{cce,unknown,cce_descriptor_root_t}


@deftp {Struct Typedef} @CCEConditionObjectType{cce,unknown}
Structure type representing the exceptional--condition object.  It has the following public fields:

@table @code
@item cce_condition_root_t root
Core values of the exceptional--condition object.
@end table
@end deftp


@CCEConditionObjectNewNoArgsStatic{cce,unknown}


@CCEConditionObjectPredicate{cce,unknown}

@c ------------------------------------------------------------------------

@CCEConditionSubtypingFacilities{cce,unknown}

@c page
@node conditions break
@section The @emph{break} exceptional--condition object


@ExceptionalConditionIndexEntries{break}


The @dfn{break} exceptional--condition object--type has the purpose of describing an exceptional
condition used to break out of a loop or a function call; this object--type does @strong{not}
represent an error of any kind.

There should be only one @emph{break} exceptional--condition object: the one predefined by
@value{PACKAGE} and built into the library as statically allocated structure.  Subtyping from this
object--type is fine to represent different reasons for escaping.

All the following definitions are accessible from the header file @file{ccexceptions.h}.


@CCEDescriptorTypedef{cce,break,cce_descriptor_root_t}


@deftp {Struct Typedef} cce_condition_break_t
Structure type representing the exceptional--condition object.  It has the following public fields:

@table @code
@item cce_condition_root_t root
Core values of the exceptional--condition object.
@end table
@end deftp


@CCEConditionObjectNewNoArgsStatic{cce,break}


@CCEConditionObjectPredicate{cce,break}

@c ------------------------------------------------------------------------

@CCEConditionSubtypingFacilities{cce,break}

@c ------------------------------------------------------------------------

@ConditionSubtypingExample{break, break}

@c page
@node conditions error
@section The @emph{error} exceptional--condition object


@ExceptionalConditionIndexEntries{error}


The @dfn{error} exceptional--condition object--type has the purpose of describing an exceptional
condition caused by an unspecified error; this condition type is meant to be the base of more
specialised object--types.

There should be only one @emph{error} exceptional--condition object: the one predefined by
@value{PACKAGE} and built into the library as statically allocated structure.  Subtyping from this
object--type is fine.

All the following definitions are accessible from the header file @file{ccexceptions.h}.


@CCEDescriptorTypedef{cce,error,cce_descriptor_root_t}


@deftp {Struct Typedef} cce_condition_error_t
Structure type representing the exceptional--condition object.  It has the following public fields:

@table @code
@item cce_condition_root_t root
Core values of the exceptional--condition object.
@end table
@end deftp


@CCEConditionObjectNewNoArgsStatic{cce,error}


@CCEConditionObjectPredicate{cce,error}

@c ------------------------------------------------------------------------

@CCEConditionSubtypingFacilities{cce,error}

@c ------------------------------------------------------------------------

@ConditionSubtypingExample{error, error}

@c page
@node conditions runtime error
@section The @emph{runtime error} exceptional--condition object


@ExceptionalConditionIndexEntries{runtime error}


The @dfn{runtime error} exceptional--condition object--type has the purpose of describing an
exceptional condition caused by a runtime error; these are mostly synchronisation errors like
failures to open a file or allocate memory.

There should be only one @emph{runtime error} exceptional--condition object: the one predefined by
@value{PACKAGE} and built into the library as statically allocated structure.  Subtyping from this
object--type is fine.

All the following definitions are accessible from the header file @file{ccexceptions.h}.


@CCEDescriptorTypedef{cce,runtime_error,cce_descriptor_error_t}


@deftp {Struct Typedef} cce_condition_runtime_error_t
Structure type representing a @emph{runtime error} exceptional--condition object.  It has the
following public fields:

@table @code
@item cce_condition_error_t error
Core values of the exceptional--condition object.
@end table
@end deftp


@CCEConditionObjectNewNoArgsStatic{cce,runtime_error}


@CCEConditionObjectPredicate{cce,runtime_error}

@c ------------------------------------------------------------------------

@CCEConditionSubtypingFacilities{cce,runtime_error}

@c ------------------------------------------------------------------------

@ConditionSubtypingExample{runtime-error, runtime_error}

@c page
@node conditions logic error
@section The @emph{logic error} exceptional--condition object


@ExceptionalConditionIndexEntries{logic error}


The @dfn{logic error} exceptional--condition object--type has the purpose of describing an
exceptional condition caused by a logic error; these are mostly synchronisation errors like failures
to open a file or allocate memory.

There should be only one @emph{logic error} exceptional--condition object: the one predefined by
@value{PACKAGE} and built into the library as statically allocated structure.  Subtyping from this
object--type is fine.

All the following definitions are accessible from the header file @file{ccexceptions.h}.


@CCEDescriptorTypedef{cce,logic_error,cce_descriptor_error_t}


@deftp {Struct Typedef} cce_condition_logic_error_t
Structure type representing a @emph{logic error} exceptional--condition object.  It has the
following public fields:

@table @code
@item cce_condition_error_t error
Core values of the exceptional--condition object.
@end table
@end deftp


@CCEConditionObjectNewNoArgsStatic{cce,logic_error}


@CCEConditionObjectPredicate{cce,logic_error}

@c ------------------------------------------------------------------------

@CCEConditionSubtypingFacilities{cce,logic_error}

@c ------------------------------------------------------------------------

@ConditionSubtypingExample{logic-error, logic_error}

@c page
@node conditions unimplemented
@section The @emph{unimplemented} exceptional--condition object


@ExceptionalConditionIndexEntries{unimplemented}


The @dfn{unimplemented} exceptional--condition object--type has the purpose of describing an
exceptional condition caused by attempting to use an unimplemented feature.  For example: attempting
to call a system function adapter for which the underlying function is not available on the current
platform.

There should be only one @emph{unimplemented} exceptional--condition object: the one predefined by
@value{PACKAGE} and built into the library as statically allocated structure.  Subtyping from this
object--type is fine.

All the following definitions are accessible from the header file @file{ccexceptions.h}.


@CCEDescriptorTypedef{cce,unimplemented,cce_descriptor_logic_error_t}


@deftp {Struct Typedef} cce_condition_unimplemented_t
Structure type representing the exceptional--condition object.  It has the following public fields:

@table @code
@item cce_condition_logic_error_t logic_error
Core values of the exceptional--condition object.
@end table
@end deftp


@CCEConditionObjectNewNoArgsStatic{cce,unimplemented}


@CCEConditionObjectPredicate{cce,unimplemented}

@c ------------------------------------------------------------------------

@CCEConditionSubtypingFacilities{cce,unimplemented}

@c ------------------------------------------------------------------------

@ConditionSubtypingExample{unimplemented, unimplemented}

@c page
@node conditions invalid arg
@section The @emph{invalid argument} exceptional--condition object


@ExceptionalConditionIndexEntries{invalid argument}


The @dfn{invalid argument} exceptional--condition object--type has the purpose of describing an
exceptional condition caused by a wrong function argument.  This condition object is meant to be
used to describe unexpected exceptions: we do not really expect the argument to be invalid, but we
want a fall--back just in case.

The function is meant to be used as follows:

@example
void
do_something (cce_destination_t L, unsigned N)
@{
  cce_check_argument(L, (0 == N), 1);

  /* do something with N */
@}
@end example

All the following definitions are accessible from the header file @file{ccexceptions.h}.


@CCEDescriptorTypedef{cce,invalid_argument,cce_descriptor_logic_error_t}


@deftp {Struct Typedef} cce_condition_invalid_argument_t
Structure type representing the exceptional--condition object.  It has the following public fields:

@table @code
@item cce_condition_logic_error_t logic_error
Core values of the exceptional--condition object.

@item char const * funcname
Pointer to a statically allocated @asciiz{} string representing the name of the function that raised
the exception.  It is usually generated with the preprocessor symbol @code{__func__}.

@item unsigned index
One--based index of the offending argument.
@end table
@end deftp


@CCEConditionObjectNew{cce,invalid_argument,{char const * @var{func}, unsigned @var{index}}}


@deftypefn {Preprocessor Macro} void cce_check_argument (cce_destination_t @var{L}, bool @var{EXPR}, unsigned @var{ARGNUM})
Expand to the following:

@example
if (! (@var{EXPR})) @{
  cce_raise((@var{L}),
    cce_condition_new_invalid_argument((@var{L}), __func__, (@var{ARGNUM})));
@}
@end example

@noindent
where @var{EXPR} is an expression evaluating to @ctrue{} if the argument is @strong{valid}.
@end deftypefn


@CCEConditionObjectPredicate{cce,invalid_argument}

@c ------------------------------------------------------------------------

@subsubheading Facilities to derive an exceptional--condition object subtype

When deriving a subtype from @CCEConditionObjectTypeCode{cce,invalid_argument} we need the
following functions.


@CCEDescriptorSetParentTo{cce,invalid_argument}


@CCEConditionObjectInit{cce,invalid_argument,{char const * @var{func}, unsigned @var{index}}}

@c ------------------------------------------------------------------------

@ConditionSubtypingExample{invalid-arg, invalid_argument}

@c page
@node conditions unreachable
@section The @emph{unreachable code} exceptional--condition object


@ExceptionalConditionIndexEntries{unreachable code}


We can use the @dfn{unreachable code} exceptional--condition object--type to signal the execution of
unreachable code.

All the following definitions are accessible from the header file @file{ccexceptions.h}.


@CCEDescriptorTypedef{cce,unreachable,cce_descriptor_logic_error_t}


@deftp {Struct Typedef} cce_condition_unreachable_t
Structure type representing the @emph{unreachable code} exceptional--condition object.  It has the
following public fields:

@table @code
@item cce_condition_logic_error_t logic_error
Core values of the exceptional--condition object--type descriptor.

@item char const * filename
Pointer to a statically allocated @asciiz{} string representing the pathname of the source file in
which the unreachable code is located.  This value is meant to be generated with the preprocessor
macro @code{__FILE__}.

@item char const * funcname
Pointer to a statically allocated @asciiz{} string representing the name of the function in which
the unreachable code is located.  This value is meant to be generated with the preprocessor macro
@code{__func__}.

@item int linenum
The line number in the source file in which the unreachable code is located.  This value is meant to
be generated with the preprocessor macro @code{__LINE__}.
@end table
@end deftp


@CCEConditionObjectNew{cce,unreachable,{char const * @var{filename}, char const * @var{funcname}, int @var{linenum}}}


@deftypefn {Preprocessor Macro} void cce_raise_unreachable (cce_destination_t @var{L})
@cindex @code{CCEXCEPTIONS_EXCLUDE_UNREACHABLE}, preprocessor symbol
@cindex Preprocessor symbol @code{CCEXCEPTIONS_EXCLUDE_UNREACHABLE}
If the preprocessor symbol @code{CCEXCEPTIONS_EXCLUDE_UNREACHABLE} @strong{is not} defined: raise an
exceptional condition of type @objtype{cce_condition_unreachable_t} by expanding into:

@example
cce_raise((L),
  cce_condition_new_unreachable((L),
    __FILE__, __func__, __LINE__));
@end example

If the preprocessor symbol @code{CCEXCEPTIONS_EXCLUDE_UNREACHABLE} @strong{is} defined: expand to
nothing.  By default @code{CCEXCEPTIONS_EXCLUDE_UNREACHABLE} is not defined.
@end deftypefn


@CCEConditionObjectPredicate{cce,unreachable}

@c ------------------------------------------------------------------------

@subsubheading Facilities to derive an exceptional--condition object subtype

When deriving a subtype from @CCEConditionObjectTypeCode{cce,unreachable} we need the
following functions.


@CCEDescriptorSetParentTo{cce,unreachable}


@CCEConditionObjectInit{cce,unreachable,{char const * @var{filename}, char const * @var{funcname}, int @var{linenum}}}

@c ------------------------------------------------------------------------

@ConditionSubtypingExample{unreachable, unreachable}

@c page
@node conditions errno
@section The @code{errno} exceptional--condition object


@ExceptionalConditionIndexEntries{@code{errno}}


The @code{errno} exceptional--condition object--type has the purpose of describing an exceptional
condition caused by a system function setting @code{errno}.  This exceptional--condition
object--type is @strong{not} meant to be subtyped.

All the following definitions are accessible from the header file @file{ccexceptions.h}.


@CCEDescriptorTypedef{cce,errno,cce_descriptor_runtime_error_t}


@deftp {Struct Typedef} cce_condition_errno_t
Structure type representing an @emph{errno} exceptional--condition object, signalled by a system
function by setting @code{errno} to a non--zero value.  It has the following public fields:

@table @code
@item cce_condition_runtime_error_t runtime_error
Core values of the exceptional--condition object--type descriptor.

@item int errnum
The value of @code{errno}.

@item char const * message
A statically allocated @asciiz{} string describing the error.
@end table
@end deftp


@deftypefun {cce_condition_t const *} cce_condition_new_errno (int @var{errnum})
Given the @code{errno} code @var{errnum}, return a pointer to the exceptional--condition object
associated to it.

If @var{errnum} is zero: return a pointer to an exceptional--condition object representing a
successful operation.  If @var{errnum} is not a valid @code{errno} code for the underlying platform:
return a pointer to an exceptional--condition object representing an invalid code.
@end deftypefun


@deftypefun {cce_condition_t const *} cce_condition_new_errno_clear (void)
Consume the current value of @code{errno} and return the return value of
@cfunc{cce_condition_new_errno} applied to it.  Before returning: @code{errno} is reset to zero.
@end deftypefun


@CCEConditionObjectPredicate{cce,errno}


@deftypefun bool cce_condition_is_errno_with_code (cce_condition_t const * @var{C}, int @var{errnum})
Return @code{true} if the exceptional--condition object referenced by @var{C} is of type
@CCEConditionObjectTypeCode{cce,errno}, or it is derived from it, and its error code equals
@var{errnum}; otherwise return @code{false}.
@end deftypefun

@c ------------------------------------------------------------------------

@subsubheading Facilities to derive an exceptional--condition object subtype

When deriving a subtype from @CCEConditionObjectTypeCode{cce,errno} we need the
following functions.


@CCEDescriptorSetParentTo{cce,errno}


@CCEConditionObjectInit{cce,errno,{int @var{errum}}}

@c ------------------------------------------------------------------------

@subsubheading Structure field getters


@deftypefun int cce_condition_ref_errno_errnum (cce_condition_t const * @var{C})
Return the value of the field @code{errnum} in the exceptional--condition object referenced by
@var{C}, which must be of type @objtype{cce_condition_errno_t}
@end deftypefun


@deftypefun {char const *} cce_condition_ref_errno_message (cce_condition_t const * @var{C})
Return the value of the field @code{message} in the exceptional--condition object referenced by
@var{C}, which must be of type @objtype{cce_condition_errno_t}
@end deftypefun

@c page
@node conditions math
@section Predefined mathematical conditions


@menu
* conditions math error::       Error computing a mathematical expression.
* conditions math nan::         Mathematical not-a-number error.
* conditions math infinity::    Mathematical infinity error.
* conditions math overflow::    Mathematical overflow error.
* conditions math underflow::   Mathematical underflow error.
@end menu

@c page
@node conditions math error
@subsection Error computing a mathematical expression


@ExceptionalConditionIndexEntries{mathematical error}


The @dfn{mathematical error} exceptional--condition object--type has the purpose of describing an
exceptional condition caused by attempting to compute an invalid mathematical expression.

There should be only one @emph{mathematical error} exceptional--condition object: the one predefined
by @value{PACKAGE} and built into the library as statically allocated structure.  Subtyping from
this object--type is fine.

All the following definitions are accessible from the header file @file{ccexceptions.h}.


@CCEDescriptorTypedef{cce,math_error,cce_descriptor_runtime_error_t}


@deftp {Struct Typedef} cce_condition_math_error_t
Structure type representing a @emph{mathematical error} exceptional--condition object.  It has the
following public fields:

@table @code
@item cce_condition_runtime_error_t runtime_error
Core values of the exceptional--condition object--type descriptor.
@end table
@end deftp


@CCEConditionObjectNewNoArgsStatic{cce,math_error}


@CCEConditionObjectPredicate{cce,math_error}

@c ------------------------------------------------------------------------

@CCEConditionSubtypingFacilities{cce,math_error}

@c ------------------------------------------------------------------------

@ConditionSubtypingExample{math-error, math_error}

@c page
@node conditions math nan
@subsection Mathematical not--a--number error


@ExceptionalConditionIndexEntries{mathematical not-a-number error}
@ExceptionalConditionIndexEntries{not-a-number error}


The @dfn{mathematical not--a--number} exceptional--condition object--type has the purpose of
describing an exceptional condition caused by a not--a--number result while computing a mathematical
expression.

There should be only one @emph{mathematical not--a--number} exceptional--condition object: the one
predefined by @value{PACKAGE} and built into the library as statically allocated structure.
Subtyping from this object--type is fine.

All the following definitions are accessible from the header file @file{ccexceptions.h}.


@CCEDescriptorTypedef{cce,math_nan,cce_descriptor_runtime_error_t}


@deftp {Struct Typedef} cce_condition_math_nan_t
Structure type representing a @emph{mathematical not--a--number} exceptional--condition object.  It
has the following public fields:

@table @code
@item cce_condition_math_error_t math_error
Core values of the exceptional--condition object--type descriptor.
@end table
@end deftp


@CCEConditionObjectNewNoArgsStatic{cce,math_nan}


@CCEConditionObjectPredicate{cce,math_nan}

@c ------------------------------------------------------------------------

@CCEConditionSubtypingFacilities{cce,math_nan}

@c ------------------------------------------------------------------------

@ConditionSubtypingExample{math-nan, math_nan}

@c page
@node conditions math infinity
@subsection Mathematical infinity error


@ExceptionalConditionIndexEntries{mathematical infinity error}
@ExceptionalConditionIndexEntries{infinity error}


The @dfn{mathematical infinity} exceptional--condition object--type has the purpose of describing an
exceptional condition caused by an infinite result while computing a mathematical expression.

There should be only one @emph{mathematical infinity} exceptional--condition object: the one
predefined by @value{PACKAGE} and built into the library as statically allocated structure.
Subtyping from this object--type is fine.

All the following definitions are accessible from the header file @file{ccexceptions.h}.


@CCEDescriptorTypedef{cce,math_infinity,cce_descriptor_runtime_error_t}


@deftp {Struct Typedef} cce_condition_math_infinity_t
Structure type representing a @emph{mathematical infinity} exceptional--condition object.  It has
the following public fields:

@table @code
@item cce_condition_math_error_t math_error
Core values of the exceptional--condition object--type descriptor.
@end table
@end deftp


@CCEConditionObjectNewNoArgsStatic{cce,math_infinity}


@CCEConditionObjectPredicate{cce,math_infinity}

@c ------------------------------------------------------------------------

@CCEConditionSubtypingFacilities{cce,math_infinity}

@c ------------------------------------------------------------------------

@ConditionSubtypingExample{math-infinity, math_infinity}

@c page
@node conditions math overflow
@subsection Mathematical overflow error


@ExceptionalConditionIndexEntries{mathematical overflow error}
@ExceptionalConditionIndexEntries{overflow error}


The @dfn{mathematical overflow} exceptional--condition object--type has the purpose of describing an
exceptional condition caused by an overflow while computing a mathematical expression.

There should be only one @emph{mathematical overflow} exceptional--condition object: the one
predefined by @value{PACKAGE} and built into the library as statically allocated structure.
Subtyping from this object--type is fine.

All the following definitions are accessible from the header file @file{ccexceptions.h}.


@CCEDescriptorTypedef{cce,math_overflow,cce_descriptor_runtime_error_t}


@deftp {Struct Typedef} cce_condition_math_overflow_t
Structure type representing a @emph{mathematical overflow} exceptional--condition object.  It has
the following public fields:

@table @code
@item cce_condition_math_error_t math_error
Core values of the exceptional--condition object--type descriptor.
@end table
@end deftp


@CCEConditionObjectNewNoArgsStatic{cce,math_overflow}


@CCEConditionObjectPredicate{cce,math_overflow}

@c ------------------------------------------------------------------------

@CCEConditionSubtypingFacilities{cce,math_overflow}

@c ------------------------------------------------------------------------

@ConditionSubtypingExample{math-overflow, math_overflow}

@c page
@node conditions math underflow
@subsection Mathematical underflow error


@ExceptionalConditionIndexEntries{mathematical underflow error}
@ExceptionalConditionIndexEntries{underflow error}


The @dfn{mathematical underflow} exceptional--condition object--type has the purpose of describing an
exceptional condition caused by an underflow while computing a mathematical expression.

There should be only one @emph{mathematical underflow} exceptional--condition object: the one
predefined by @value{PACKAGE} and built into the library as statically allocated structure.
Subtyping from this object--type is fine.

All the following definitions are accessible from the header file @file{ccexceptions.h}.


@CCEDescriptorTypedef{cce,math_underflow,cce_descriptor_runtime_error_t}


@deftp {Struct Typedef} cce_condition_math_underflow_t
Structure type representing a @emph{mathematical underflow} exceptional--condition object.  It has
the following public fields:

@table @code
@item cce_condition_math_error_t math_error
Core values of the exceptional--condition object--type descriptor.
@end table
@end deftp


@CCEConditionObjectNewNoArgsStatic{cce,math_underflow}


@CCEConditionObjectPredicate{cce,math_underflow}

@c ------------------------------------------------------------------------

@CCEConditionSubtypingFacilities{cce,math_underflow}

@c ------------------------------------------------------------------------

@ConditionSubtypingExample{math-underflow, math_underflow}

@c page
@node conditions custom
@section Defining custom condition objects


The source distribution of @value{PACKAGE} comes with coding examples under the @file{examples}
directory of the source tree; we can take that code and use it as a starting point.

@menu
* conditions custom plain::     Plain exceptional-condition objects.
@end menu

@c page
@node conditions custom plain
@subsection Plain exceptional-condition objects


@include condition-example-plain.texi

@c page
@node system
@chapter System call adapters


@value{PACKAGE} defines function wrappers for some basic @posix{} system calls.  Each wrapper
accepts a pointer to @objtype{cce_location_t} as argument and, in case of error, it will perform a
non--local exit by jumping to the selected location.

The wrapper functions accept the same arguments of the system calls and return the same return value
of the system calls (if they complete successfully).

All the wrappers reset @code{errno} to zero before performing the system call and reset it to zero
before returning.  In case of error: the raised exceptional condition objects are of type
@objtype{cce_condition_errno_t}.

@menu
* system memory::               Memory allocation.
@end menu

@c page
@node system memory
@section Memory allocation


@menu
* system memory core::          Core memory allocation functions.
* system memory handlers::      Handlers for allocated memory.
* system memory gmalloc::       Guarded allocation: @cfunc{malloc}.
* system memory gcalloc::       Guarded allocation: @cfunc{calloc}.
* system memory grealloc::      Guarded allocation: @cfunc{realloc}.
@end menu

@c page
@node system memory core
@subsection Core memory allocation functions


The following symbols are defined in the header file @file{ccexceptions.h}.


@deftypefun {void *} cce_sys_malloc (cce_destination_t @var{L}, size_t @var{size})
Wrapper for @cfunc{malloc}.  This function never returns @cnull{}.
@end deftypefun


@deftypefun {void *} cce_sys_realloc (cce_destination_t @var{L}, void * @var{old_P}, size_t @var{newsize})
Wrapper for @cfunc{realloc}.  This function never returns @cnull{}.
@end deftypefun


@deftypefun {void *} cce_sys_calloc (cce_destination_t @var{L}, size_t @var{count}, size_t @var{eltsize})
Wrapper for @cfunc{calloc}.  This function never returns @cnull{}.
@end deftypefun

@c page
@node system memory handlers
@subsection Handlers for allocated memory


We can handle memory that must be released with the standard function @cfunc{free} as follows:

@example
cce_location_t       L[1];
cce_clean_handler_t  P_H[1];

if (cce_location(L)) @{
  cce_run_catch_handlers_final(L);
@} else @{
  void *        P = cce_sys_malloc(L, 4096);
  cce_clean_handler_malloc_init(L, P_H, P);
  cce_run_body_handlers(L);
@}
@end example


@deftypefun void cce_init_clean_handler_malloc (cce_destination_t @var{L}, cce_clean_handler_t * @var{H}, void * @var{P})
@deftypefunx void cce_init_error_handler_malloc (cce_destination_t @var{L}, cce_error_handler_t * @var{H}, void * @var{P})
Register @var{H} as clean or error handler in the context of @var{L}.  The handler function will
release the memory block referenced by @var{P} using the standard function @cfunc{free}.
@end deftypefun


@deftypefn {Preprocessor Macro} void cce_init_handler_malloc (cce_destination_t @var{L}, cce_clean_handler_t * @var{P_H}, void * @var{P})
@deftypefnx {Preprocessor Macro} void cce_init_handler_malloc (cce_destination_t @var{L}, cce_error_handler_t * @var{P_H}, void * @var{P})
This preprocessor macro uses @code{_Generic} to dispatch the call according to the type of the
pointer @var{P_H}; if the type is:

@table @code
@item cce_clean_handler_t
The macro expands into a call to @cfunc{cce_init_clean_handler_malloc}.

@item cce_error_handler_t
The macro expands into a call to @cfunc{cce_init_error_handler_malloc}.
@end table
@end deftypefn

@c page
@node system memory gmalloc
@subsection Guarded allocation: @cfunc{malloc}


To allocate memory using a clean handler with a guarded function, we can do:

@example
cce_location_t          L[1];
cce_clean_handler_t     P_H[1];

if (cce_location(L)) @{
  cce_run_catch_handlers_final(L);
@} else @{
  void *  P = cce_sys_malloc_guarded(L, P_H, 1024);

  /* Do something with P. */
  cce_run_body_handlers(L);
@}
@end example

@noindent
while to use an error handler we can do:

@example
cce_location_t          L[1];
cce_error_handler_t     P_H[1];

if (cce_location(L)) @{
  cce_run_catch_handlers_final(L);
@} else @{
  void *  P = cce_sys_malloc_guarded(L, P_H, 1024);

  /* Do something with P. */
  cce_run_body_handlers(L);
@}
@end example


@deftypefun {void *} cce_sys_malloc_guarded_clean (cce_destination_t @var{L}, cce_clean_handler_t * @var{P_H}, size_t @var{size})
@deftypefunx {void *} cce_sys_malloc_guarded_error (cce_destination_t @var{L}, cce_error_handler_t * @var{P_H}, size_t @var{size})
Like @cfunc{cce_sys_malloc}, but register the resulting pointer in the handler referenced by
@var{P_H}.
@end deftypefun


@deftypefn {Preprocessor Macro} {void *} cce_sys_malloc_guarded (cce_destination_t @var{L}, cce_clean_handler_t * @var{P_H}, size_t @var{size})
@deftypefnx {Preprocessor Macro} {void *} cce_sys_malloc_guarded (cce_destination_t @var{L}, cce_error_handler_t * @var{P_H}, size_t @var{size})
This preprocessor macro uses @code{_Generic} to dispatch the call according to the type of the
pointer @var{P_H}; if the type is:

@table @code
@item cce_clean_handler_t
The macro expands into a call to @cfunc{cce_sys_malloc_guarded_clean}.

@item cce_error_handler_t
The macro expands into a call to @cfunc{cce_sys_malloc_guarded_error}.
@end table
@end deftypefn

@c page
@node system memory gcalloc
@subsection Guarded allocation: @cfunc{calloc}


@deftypefun {void *} cce_sys_calloc_guarded_clean (cce_destination_t @var{L}, cce_clean_handler_t * @var{P_H}, size_t @var{count}, size_t @var{eltsize})
@deftypefunx {void *} cce_sys_calloc_guarded_error (cce_destination_t @var{L}, cce_error_handler_t * @var{P_H}, size_t @var{count}, size_t @var{eltsize})
Like @cfunc{cce_sys_calloc}, but register the resulting pointer in the handler referenced by
@var{P_H}.
@end deftypefun


@deftypefn {Preprocessor Macro} {void *} cce_sys_calloc_guarded (cce_destination_t @var{L}, cce_clean_handler_t * @var{P_H}, size_t @var{count}, size_t @var{eltsize})
@deftypefnx {Preprocessor Macro} {void *} cce_sys_calloc_guarded (cce_destination_t @var{L}, cce_error_handler_t * @var{P_H}, size_t @var{count}, size_t @var{eltsize})
This preprocessor macro uses @code{_Generic} to dispatch the call according to the type of the
pointer @var{P_H}; if the type is:

@table @code
@item cce_clean_handler_t
The macro expands into a call to @cfunc{cce_sys_calloc_guarded_clean}.

@item cce_error_handler_t
The macro expands into a call to @cfunc{cce_sys_calloc_guarded_error}.
@end table
@end deftypefn

@c page
@node system memory grealloc
@subsection Guarded allocation: @cfunc{realloc}


@deftypefun {void *} cce_sys_realloc_guarded_clean (cce_destination_t @var{L}, cce_clean_handler_t * @var{P_H}, void * @var{old_P}, size_t @var{newsize})
@deftypefunx {void *} cce_sys_realloc_guarded_error (cce_destination_t @var{L}, cce_error_handler_t * @var{P_H}, void * @var{old_P}, size_t @var{newsize})
Like @cfunc{cce_sys_realloc}, but register the resulting pointer in the handler referenced by
@var{P_H}.  The handler is updated to reference the new memory pointer.  If, upon entering this
function, the handler @var{P_H} does not reference the pointer @var{old_P}: raise an exception by
performing a non--local exit to @var{L}, with condition object of type
@objtype{cce_condition_invalid_argument_t}.
@end deftypefun


@deftypefn {Preprocessor Macro} {void *} cce_sys_realloc_guarded (cce_destination_t @var{L}, cce_clean_handler_t * @var{P_H}, void * @var{old_P}, size_t @var{newsize})
@deftypefnx {Preprocessor Macro} {void *} cce_sys_realloc_guarded (cce_destination_t @var{L}, cce_error_handler_t * @var{P_H}, void * @var{old_P}, size_t @var{newsize})
This preprocessor macro uses @code{_Generic} to dispatch the call according to the type of the
pointer @var{P_H}; if the type is:

@table @code
@item cce_clean_handler_t
The macro expands into a call to @cfunc{cce_sys_realloc_guarded_clean}.

@item cce_error_handler_t
The macro expands into a call to @cfunc{cce_sys_realloc_guarded_error}.
@end table
@end deftypefn

@c page
@node tracing
@chapter Printing execution traces


When code using @value{PACKAGE} is compiled with the preprocessor macro @code{CCEXCEPTIONS_TRACE}
defined before including @file{ccexceptions.h}: some tracing features are enabled.  It means debug
messages are printed on @code{stderr} following the execution path of raised exceptions representing
errors.  The affected functions and macros are:

@example
cce_location
cce_raise
cce_run_catch_handlers_raise
cce_run_catch_handlers_final
cce_run_body_handlers_raise
cce_run_body_handlers_final
@end example

Tracing features are completely transparent to the client code: we must do nothing different when
tracing is enabled.

As example, when the following code is run:

@example
#define CCEXCEPTIONS_TRACE      1
#include <ccexceptions.h>
#include <stdio.h>
#include <stdlib.h>

void
test_tracing_sub_sub_sub (cce_destination_t upper_L)
@{
  cce_location_t        L[1];

  if (cce_location(L)) @{
    cce_run_catch_handlers_raise(L, upper_L);
  @} else @{
    cce_raise(L, cce_condition_new_unknown());
    cce_run_body_handlers(L);
  @}
@}

void
test_tracing_sub_sub (cce_destination_t upper_L)
@{
  cce_location_t        L[1];

  if (cce_location(L)) @{
    cce_run_catch_handlers_raise(L, upper_L);
  @} else @{
    test_tracing_sub_sub_sub(L);
    cce_run_body_handlers(L);
  @}
@}

void
test_tracing_sub (cce_destination_t upper_L)
@{
  cce_location_t        L[1];

  if (cce_location(L)) @{
    cce_run_catch_handlers_raise(L, upper_L);
  @} else @{
    test_tracing_sub_sub(L);
    cce_run_body_handlers(L);
  @}
@}

void
test_tracing (void)
@{
  cce_location_t        L[1];

  if (cce_location(L)) @{
    cce_run_catch_handlers_final(L);
  @} else @{
    test_tracing_sub(L);
    cce_run_body_handlers(L);
  @}
@}

int
main (void)
@{
  test_tracing();
@}
@end example

@noindent
it prints:

@smallexample
raising:    ../tests/tracing.c:48, test_tracing_sub_sub_sub(): Unknown exceptional condition
catching:   ../tests/tracing.c:45, test_tracing_sub_sub_sub(): Unknown exceptional condition
re-raising: ../tests/tracing.c:46, test_tracing_sub_sub_sub(): Unknown exceptional condition
catching:   ../tests/tracing.c:58, test_tracing_sub_sub(): Unknown exceptional condition
re-raising: ../tests/tracing.c:59, test_tracing_sub_sub(): Unknown exceptional condition
catching:   ../tests/tracing.c:71, test_tracing_sub(): Unknown exceptional condition
re-raising: ../tests/tracing.c:72, test_tracing_sub(): Unknown exceptional condition
catching:   ../tests/tracing.c:84, test_tracing(): Unknown exceptional condition
finalising: ../tests/tracing.c:85, test_tracing(): Unknown exceptional condition
@end smallexample

@c page
@node helpers
@chapter Helpers


@deffn {Preprocessor Macro} CCE_PC (@var{TYPE}, @var{X}, @var{Y})
Pointer--type cast helper.  It expands into:

@example
@var{TYPE} * @var{X} = (@var{TYPE} *) (@var{Y})
@end example

So, for example, instead of writing:

@example
cce_location_t    L[1];
cce_condition_t * C = cce_condition(L);
ccevents_timeval_invalid_t * K = (ccevents_timeval_invalid_t *) C;
@end example

@noindent
we can write:

@example
cce_location_t    L[1];
cce_condition_t * C = cce_condition(L);
CCE_PC(ccevents_timeval_invalid_t, K, C);
@end example

@noindent
or:

@example
cce_location_t    L[1];
CCE_PC(ccevents_timeval_invalid_t, C, cce_condition(L));
@end example
@end deffn


@defmac CCE_UNUSED
Preprocessor macro that is meant to expand into an attribute declaration.  If the symbol
@code{__GNUC__} is defined, the expansion is:

@example
__attribute__((__unused__))
@end example

@noindent
otherwise the expansion is the empty string.
@end defmac

@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include lgpl-3.0.texi
@include fdl-1.3.texi

@c page
@node references
@appendix Bibliography and references


The documentation of @value{PACKAGE} is available online:

@center @value{DocumentationUrl}

@noindent
the latest release of this package can be downloaded from:

@center @value{DownloadUrl}

@noindent
development takes place at:

@center @value{GithubUrl}

@noindent
and as backup at:

@center @value{BitbucketUrl}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file

